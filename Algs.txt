Some algos, taken directly from schools tables, to implement later, and to create a sort of toolbox...


Separation:
//separate a, based on true
k, j = 0;
for i=m->n{
  if(true for a[i])
  then k++; b[k] = a[i]
  else j++; c[j] = a[i]
}

Common elements:
// which a = b, into c
k = 0;
for i=1->m{
  j = 1;
  while j<=n AND a[i] != b[j]
    j++;
    
  if(j<=n)
  then k++; c[k] = a[i]
  
}

Merge
//merge unique
for i=1->m{
  c[i]=a[i]
}
k=m
for j=1->n{
  i=1
  while i<=m AND a[i] != b[j]
    i++;
    
  if(i>m)
  then k++; c[k] = a[i]
}

Merge NU
//merge nonunique, from: ordered
i, j = 1;
k=0;
while i<m AND j<n{
  k++;
  switch
    a[i]<b[j] -> r[k]=a[i]; i++
    a[i]=b[j] -> r[k]=a[i]; i++; j++
    a[i]>b[j] -> r[k]=b[j]; j++
}
while i<=m
  k++; r[k]=a[i]; i++

while j<=n
  k++; r[k]=b[j]; j++
  
#####SEARCHES#####

Linear search
//find element in a
i=m
while i<=n AND NOT n = a[i]
  i++

v = (i<=n)
if(v)
then k = i

Binary (=log) search
==find element in a
e = m
u = n
v = false
while e<=u AND !v{
  k = (int)(e+u)/2
  switch
    a[k] < b -> e = k+1
    a[k] = b -> v = true
    a[k] > b -> u = k-1
}

#####MAXES#####
Find first max
//find the value, and first occurence of max
k=1
t=a[m] //m=start
for i=m+1 -> n
  if(t<a[i])
  then k = i; t = a[i]
  
If Max
//find max where true
i=m-1
do i++
while i<= n AND !true(a[i])

v=(i<=n)
k=i
for i=k->n
  if(a[i]>a[k] AND true(a[i])
  then k = i
  
Count Max
//count the occurences of the max element
t = a[m] //m=start
d=1
for i=m+1 -> n{
  switch
    a[i] < t -> break
    a[i] = t -> d++
    a[i] > t -> t=a[i] d=1
}

Local Max
// find x where (x-1< x <x+1) = true
k= m+1
v= false
while k< n-1 AND !v
  v=(a[k-1]<a[k]) AND (a[k] > a[k+1]); k++
  
#####SORTS#####
//putting elements in order

Insertion sort
//carry and put
for i=m+1 ->n{
  b= a[i]; j--
  while j>= m AND a[j] > b
    a[j+1] = a[j]; j++
   
  a[j+1]=b
}

Bubble sort
//compare by2, in bubbles
for i=n -> m+1; i--{
  for j=m ->i-1{
    if(a[j]>a[j+1])
    then a[j] SWITCH PLACES a[j+1]
  }
}

Compare sort
//compare by2
for i = m -> n-1{
  for j = i+1 -> n{
    if(a[i]>a[j])
    then a[i] SWITCH PLACES a[j]
  }
}

By Min Search
//find the min, put it first, repeat
for i=m -> n-1{
  t=i
  for j = i+1 -> n{
    if(a[t] > a[j] 
    then t=j
  }
  a[i] SWITCH PLACES a[t]
}
